name: Testing the GitHub Pages publication

on:
  push
    
env:
  URL: https://helaili.github.io/jekyll-action/

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
    - name: Set the GH Pages branch
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.JEKYLL_PAT}} 
        script: |
          await github.repos.updateInformationAboutPagesSite({
            owner: context.repo.owner,
            repo: context.repo.repo,
            source: {
              branch: "gh-pages",
              path: "/"
            }
          })
      
  basic_run: 
    runs-on: ubuntu-latest
    needs: [init]
    outputs:
      sha: ${{ steps.run.outputs.sha }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: sample_site_gemfiles/vendor/bundle
        key: gems-${{ hashFiles('**/Gemfile') }}
        restore-keys: |
          gems
    - name: Basic run
      id: run
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_basic.yml"
        jekyll_env: development
        build_only: false
        pre_build_commands: apk --update add imagemagick nodejs
        token: ${{ secrets.GITHUB_TOKEN }}
    
  basic_publish: 
    runs-on: ubuntu-latest
    needs: [basic_run]
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/publish
      with: 
        token: ${{ secrets.JEKYLL_PAT }}
        sha: ${{ needs.basic_run.outputs.sha }} 
        branch: "gh-pages"
        path: "/"

  basic_test: 
    runs-on: ubuntu-latest
    needs: [basic_publish]
    steps:  
    - uses: actions/checkout@v2
    - uses: ./.github/actions/test
      with: 
        token: ${{ secrets.GITHUB_TOKEN }}
        spec: cypress/integration/basic/**/*
        suffix: "basic"

  jekyll_src_run: 
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.run.outputs.sha }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: sample_site_gemfiles/vendor/bundle
        key: gems-${{ hashFiles('**/Gemfile') }}
        restore-keys: |
          gems
    - name: Jekyll src run
      id: run
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_jekyll_src.yml"
        jekyll_src: sample_site
        target_branch: jekyll_src_test_pages_branch
        jekyll_env: production
      env:
        JEKYLL_PAT: ${{ secrets.GITHUB_TOKEN }}
        JEKYLL_DEBUG: true
        
  jekyll_src_publish: 
    runs-on: ubuntu-latest
    needs: [basic_test, jekyll_src_run]
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/publish
      with: 
        token: ${{ secrets.JEKYLL_PAT }}
        sha: ${{ needs.jekyll_src_run.outputs.sha }} 
        branch: "jekyll_src_test_pages_branch"
        path: "/"

  jekyll_src_test: 
    runs-on: ubuntu-latest
    needs: jekyll_src_publish
    steps:
    - uses: actions/checkout@v2
    - name: Caching
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get the URL of the rendered site
      id: rendered-site-url
      run: |
        full_url=$(curl -sH "Authorization: token ${AUTH_TOKEN}" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pages" | \
        awk -F'"' '/\"html_url\"/ { print $4 }')
        url=$(dirname "${full_url}")
        echo "::set-output name=url::${url}"
      env:
        AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cypress run
      uses: cypress-io/github-action@v2
      with:
        config: baseUrl=${{ steps.rendered-site-url.outputs.url }}
        working-directory: tests/e2e
        spec: cypress/integration/jekyll_src/**/*
    - name: Save Cypress Screenshots
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/screenshots
    - name: Save Cypress Videos
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: cypress-videos-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/videos

  jekyll_gem_src_run: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: sample_site_gemfiles/vendor/bundle
        key: gems-${{ hashFiles('**/Gemfile') }}
        restore-keys: |
          gems
    - name: Basic run
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_jekyll_gem_src.yml"
        jekyll_src: sample_site
        gem_src: sample_site_gemfiles
        target_branch: jekyll_gem_src_test_pages_branch
        token: ${{ secrets.GITHUB_TOKEN }}
      
  jekyll_gem_src_publish: 
    runs-on: ubuntu-latest
    needs: [jekyll_src_test, jekyll_gem_src_run]
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/publish
      with: 
        token: ${{ secrets.JEKYLL_PAT }}
        sha: ${{ needs.jekyll_gem_src_run.outputs.sha }} 
        branch: "jekyll_gem_src_test_pages_branch"
        path: "/"
  
  jekyll_gem_src_test: 
    runs-on: ubuntu-latest
    needs: [jekyll_gem_src_publish]
    steps:
    - uses: actions/checkout@v2
    - name: Caching
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get the URL of the rendered site
      id: rendered-site-url
      run: |
        full_url=$(curl -sH "Authorization: token ${AUTH_TOKEN}" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pages" | \
        awk -F'"' '/\"html_url\"/ { print $4 }')
        url=$(dirname "${full_url}")
        echo "::set-output name=url::${url}"
      env:
        AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cypress run
      uses: cypress-io/github-action@v2
      with:
        config: baseUrl=${{ steps.rendered-site-url.outputs.url }}
        working-directory: tests/e2e
        spec: cypress/integration/jekyll_gem_src/**/*
    - name: Save Cypress Screenshots
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/screenshots
    - name: Save Cypress Videos
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: cypress-videos-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/videos

  build_only_run: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: sample_site_gemfiles/vendor/bundle
        key: gems-${{ hashFiles('**/Gemfile') }}
        restore-keys: |
          gems
    - name: Build only run
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_build_only.yml"
        jekyll_env: development
        build_only: true
        token: ${{ secrets.GITHUB_TOKEN }}

  build_only_publish: 
    runs-on: ubuntu-latest
    needs: [jekyll_gem_src_test, build_only_run]
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/publish
      with: 
        token: ${{ secrets.JEKYLL_PAT }}
        sha: ${{ needs.jekyll_gem_src_run.outputs.sha }} 
        branch: "jekyll_gem_src_test_pages_branch"
        path: "/"
    
  build_only_test: 
    runs-on: ubuntu-latest
    needs: build_only_publish
    steps:
    - uses: actions/checkout@v2
    - name: Caching
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get the URL of the rendered site
      id: rendered-site-url
      run: |
        full_url=$(curl -sH "Authorization: token ${AUTH_TOKEN}" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pages" | \
        awk -F'"' '/\"html_url\"/ { print $4 }')
        url=$(dirname "${full_url}")
        echo "::set-output name=url::${url}"
      env:
        AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cypress run
      uses: cypress-io/github-action@v2
      with:
        config: baseUrl=${{ steps.rendered-site-url.outputs.url }}
        working-directory: tests/e2e
        # We're not publishing so the previous test should still pass
        spec: cypress/integration/jekyll_gem_src/**/*
    - name: Save Cypress Screenshots
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/screenshots
    - name: Save Cypress Videos
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: cypress-videos-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/videos
  
  keep_history_prepare: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: keep_history_test_pages_branch
    - run: | 
        rm -rf *
        echo "<html><body><p>hello</p><p>${GITHUB_RUN_ID}</p></body></html>" > hello.html
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com" 
        git add hello.html
        git commit -m "adding a new file"
        git push --force origin keep_history_test_pages_branch
  
  keep_history_run: 
    runs-on: ubuntu-latest
    needs: keep_history_prepare
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: sample_site_gemfiles/vendor/bundle
        key: gems-${{ hashFiles('**/Gemfile') }}
        restore-keys: |
          gems
    - name: Keep history run
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_keep_history.yml"
        jekyll_src: sample_site
        target_branch: keep_history_test_pages_branch
        keep_history: true
        token: ${{ secrets.GITHUB_TOKEN }}
      
  keep_history_publish: 
    runs-on: ubuntu-latest
    needs: [build_only_test, keep_history_run]
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/publish
      with: 
        token: ${{ secrets.JEKYLL_PAT }}
        sha: ${{ needs.keep_history_run.outputs.sha }} 
        branch: "keep_history_test_pages_branch"
        path: "/"
  
  keep_history_test: 
    runs-on: ubuntu-latest
    needs: keep_history_publish
    steps:
    - uses: actions/checkout@v2
    - name: Caching
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get the URL of the rendered site
      id: rendered-site-url
      run: |
        full_url=$(curl -sH "Authorization: token ${AUTH_TOKEN}" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pages" | \
        awk -F'"' '/\"html_url\"/ { print $4 }')
        url=$(dirname "${full_url}")
        echo "::set-output name=url::${url}"
      env:
        AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cypress run
      uses: cypress-io/github-action@v2
      with:
        config: baseUrl=${{ steps.rendered-site-url.outputs.url }}
        working-directory: tests/e2e
        spec: cypress/integration/keep_history/**/*
    - name: Save Cypress Screenshots
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/screenshots
      # Test run video was always captured, so this action uses "always()" condition
    - name: Save Cypress Videos
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: cypress-videos-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/videos
    
  multiple_versions_slash_publish: 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: master
    - name: Run with dest path
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_multiple_versions.yml"
        target_branch: multiple_versions_test_pages_branch
        target_path: /
        token: ${{ secrets.GITHUB_TOKEN }}
      
  multiple_versions_current_publish: 
    runs-on: ubuntu-latest
    needs: multiple_versions_slash_publish
    steps:
    - uses: actions/checkout@v2
      with:
        ref: master
    - name: Run with dest path
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_multiple_versions.yml"
        target_branch: multiple_versions_test_pages_branch
        keep_history: true
        target_path: current
        token: ${{ secrets.GITHUB_TOKEN }}
  
  multiple_versions_old_publish: 
    runs-on: ubuntu-latest
    needs: multiple_versions_current_publish
    steps:
    - uses: actions/checkout@v2
      with:
        ref: test-old-version
    - name: Run with dest path
      uses: ./
      with:
        jekyll_build_options: "--config ../sample_site/_config.yml,../sample_site/_config_multiple_versions.yml"
        target_branch: multiple_versions_test_pages_branch
        keep_history: true
        target_path: old
        token: ${{ secrets.GITHUB_TOKEN }}
      
  
  multiple_versions_publish: 
    runs-on: ubuntu-latest
    needs: [keep_history_test, multiple_versions_old_publish]
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/publish
      with: 
        token: ${{ secrets.JEKYLL_PAT }}
        sha: ${{ needs.multiple_versions_old_publish.outputs.sha }} 
        branch: "multiple_versions_test_pages_branch"
        path: "/"

  multiple_versions_test: 
    runs-on: ubuntu-latest
    needs: multiple_versions_publish
    steps:
    - uses: actions/checkout@v2
    - name: Caching
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get the URL of the rendered site
      id: rendered-site-url
      run: |
        full_url=$(curl -sH "Authorization: token ${AUTH_TOKEN}" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pages" | \
        awk -F'"' '/\"html_url\"/ { print $4 }')
        url=$(dirname "${full_url}")
        echo "::set-output name=url::${url}"
      env:
        AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cypress run
      uses: cypress-io/github-action@v2
      with:
        config: baseUrl=${{ steps.rendered-site-url.outputs.url }}
        working-directory: tests/e2e
        spec: cypress/integration/multiple/**/*
    - name: Save Cypress Screenshots
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/screenshots
    - name: Save Cypress Videos
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: cypress-videos-${{ runner.os }}-${{ matrix.node-version }}
        path: tests/e2e/videos